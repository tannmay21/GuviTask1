1. Differences between HTTP 1.1 and HTTP 2:-

Multiplexing: HTTP/1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it. In contrast, HTTP/2 is able to use a single TCP connection to send multiple streams of data at once so that no one resource blocks any other resource. HTTP/2 does this by splitting data into binary-code messages and numbering these messages so that the client knows which stream each binary message belongs to.

Server push: Typically, a server only serves content to a client device if the client asks for it. However, this approach is not always practical for modern webpages, which often involve several dozen separate resources that the client must request. HTTP/2 solves this problem by allowing a server to "push" content to a client before the client asks for it. The server also sends a message letting the client know what pushed content to expect – like if Bob had sent Alice a Table of Contents of his novel before sending the whole thing.

Header compression: Small files load more quickly than large ones. To speed up web performance, both HTTP/1.1 and HTTP/2 compress HTTP messages to make them smaller. However, HTTP/2 uses a more advanced compression method called HPACK that eliminates redundant information in HTTP header packets. This eliminates a few bytes from every HTTP packet. Given the volume of HTTP packets involved in loading even a single webpage, those bytes add up quickly, resulting in faster loading.

2. 5 differences between Browser JS and Node JS:-

i.  Application-
Browser.js is mainly used for client-side applications like validations on a web page or dynamic page display and as the name suggests it gets executed in the browser only while in the case of Node.js javascript code gets executed outside the browser as it is an interpreter as well as an environment for running javascript and used for server-side applications.In nutshell, we can say Browser.js is used for frontend while Node.js is used for backend applications.

ii. System access-
Node.js has full system access i.e can read and write directly to the file system like any other application that also concludes that we can write complete software using Node.js while Browser.js is sandboxed for the safety purposes and have access limited to the browser. Now, that also makes it important that we should refrain from running any untrusted Javascript in Node.js.

iii. Running Engine
Browser.js runs any engine like Spider monkey (Firefox), JavaScript Core (Safari), V8 (Google Chrome) accordingly to the browser while Node.js runs in a V8 engine which is mainly used by google chrome.

iv. Modularity
In Node.js everything is a module i.e it is mandatory to keep everything inside a module while moduling is not mandatory for browser javascript.

v. Missing Objects-
In Node.js many objects are missing like-
“window” object cause it doesn’t have a window to draw anything.
“location” object is related to a particular URL that means it is for page-specific.
“document” object also, cause it never have to render anything on a page.

while browser.js has all these as predefined objects but the browser is missing on these-
“global” object contains several functions that are not available in browsers as they are needed for server-side works only.
“require” object which is used to include modules in the app.

3. What happens when we type a URL in a browsers address bar?

Following steps are initiated:-

i.   URL can be www.example.com
ii.  Then there is a DNS(Domaina Name Server) which is the part of ISP(Internet Service Provider) which submits and converts the URL into an IP address. This process        is called Forward lookup
iii. This initiates to a TCP connection, once the connection initiates the request will reach the HTTP server and the server will respond owth the response.
iv.  The server responds with the HTML file, CSS file, JavaScript file.
v.   Once these files reaches to the browser it will be forwarded to the rendering engine where the engine converts all the files into a format which the computer can       read.
vi.  Where the converting process contains the Parsing process, Tokenizing process, Rendering tree formation then finally the painting process. 

4. Differnce between copy by reference and copy by value. 

Copy by value-
Copy by value means that a copy of the actual parameter’s value is made in memory, i.e. the caller and callee have two independent variables with the same value. If the callee modifies the parameter value, the effect is not visible to the caller.

Overview:
*Copies an argument by value.
*Callee does not have any access to the underlying element in the calling code.
*A copy of the data is sent to the callee.
*Changes made to the copied variable do not affect the actual value.

Copy by reference-
Copy by reference (also called copy by address) means to copy the reference of an argument in the calling function to the corresponding formal parameter of the called function so that a copy of the address of the actual parameter is made in memory, i.e. the caller and the callee use the same variable for the parameter. If the callee modifies the parameter variable, the effect is visible to the caller’s variable.

Overview:
*Copies an argument by reference.
*Callee gives a direct reference to the programming element in the calling code.
*The memory address of the stored data is copied.
*Changes to the value have an effect on the original data.




 

 



